{"version":3,"file":"DocumentUploader.stories-aed377d1.js","sources":["../../node_modules/tiny-emitter/index.js","../../frontend/event-bus.ts","../../frontend/components/UploadEntry.vue","../../frontend/DocumentUploader.vue","../../node_modules/mock-xmlhttprequest/dist/esm/HeadersContainer.mjs","../../node_modules/mock-xmlhttprequest/dist/esm/MockXhrRequest.mjs","../../node_modules/mock-xmlhttprequest/dist/esm/Utils.mjs","../../node_modules/mock-xmlhttprequest/dist/esm/RequestData.mjs","../../node_modules/mock-xmlhttprequest/dist/esm/XhrEvent.mjs","../../node_modules/mock-xmlhttprequest/dist/esm/XhrProgressEvent.mjs","../../node_modules/mock-xmlhttprequest/dist/esm/XhrEventTarget.mjs","../../node_modules/mock-xmlhttprequest/dist/esm/MockXhr.mjs","../../node_modules/mock-xmlhttprequest/dist/esm/MockXhrServer.mjs","../../node_modules/mock-xmlhttprequest/dist/esm/Factories.mjs"],"sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","/*\n *\n *   OSIS stands for Open Student Information System. It's an application\n *   designed to manage the core business of higher education institutions,\n *   such as universities, faculties, institutes and professional schools.\n *   The core business involves the administration of students, teachers,\n *   courses, programs and so on.\n *\n *   Copyright (C) 2015-2021 Université catholique de Louvain (http://www.uclouvain.be)\n *\n *   This program is free software: you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation, either version 3 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   A copy of this license - GNU General Public License - is available\n *   at the root of the source code of this program.  If not,\n *   see http://www.gnu.org/licenses/.\n *\n */\n\nimport {TinyEmitter} from 'tiny-emitter';\n\nconst EventBus = new TinyEmitter();\n\nexport default EventBus;\n\n","<!--\n  -\n  -   OSIS stands for Open Student Information System. It's an application\n  -   designed to manage the core business of higher education institutions,\n  -   such as universities, faculties, institutes and professional schools.\n  -   The core business involves the administration of students, teachers,\n  -   courses, programs and so on.\n  -\n  -   Copyright (C) 2015-2021 Université catholique de Louvain (http://www.uclouvain.be)\n  -\n  -   This program is free software: you can redistribute it and/or modify\n  -   it under the terms of the GNU General Public License as published by\n  -   the Free Software Foundation, either version 3 of the License, or\n  -   (at your option) any later version.\n  -\n  -   This program is distributed in the hope that it will be useful,\n  -   but WITHOUT ANY WARRANTY; without even the implied warranty of\n  -   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  -   GNU General Public License for more details.\n  -\n  -   A copy of this license - GNU General Public License - is available\n  -   at the root of the source code of this program.  If not,\n  -   see http://www.gnu.org/licenses/.\n  -\n  -->\n<template>\n  <li class=\"media\">\n    <div\n        v-if=\"isImage\"\n        class=\"media-left\"\n    >\n      <img\n          class=\"media-object img-thumbnail\"\n          :src=\"fileUrl\"\n          :alt=\"file.name\"\n          width=\"80\"\n          @load=\"revokeUrl(fileUrl)\"\n      >\n    </div>\n    <div class=\"media-body\">\n      <h4 class=\"media-heading\">\n        {{ file.name }}\n        <small><span class=\"text-nowrap\">{{ humanizedSize }}</span> ({{ file.type }})</small>\n      </h4>\n      <div\n          v-if=\"!error\"\n          class=\"progress\"\n      >\n        <div\n            class=\"progress-bar progress-bar-striped active\"\n            role=\"progressbar\"\n            :aria-valuenow=\"progress\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            :style=\"{width: `${progress}%`}\"\n        >\n          <span class=\"sr-only\">{{ $t('upload_entry.completion', { progress }) }}</span>\n        </div>\n      </div>\n      <span\n          v-else\n          class=\"text-danger\"\n      >\n        {{ error }}\n      </span>\n    </div>\n    <div class=\"media-right\">\n      <button\n          type=\"button\"\n          class=\"btn btn-danger\"\n          @click=\"$emit('delete')\"\n      >\n        <span class=\"fas fa-trash-alt\" />\n      </button>\n    </div>\n  </li>\n</template>\n\n<script lang=\"ts\">\n/**\n * This component goal is to upload a local file and emit a token\n */\nimport {humanizedSize} from '../utils';\nimport EventBus from '../event-bus';\nimport {defineComponent} from 'vue';\nimport type {ErrorReponse, TokenReponse} from \"../interfaces\";\n\nexport default defineComponent({\n  name: 'UploadEntry',\n  props: {\n    file: {\n      type: File,\n      required: true,\n    },\n    baseUrl: {\n      type: String,\n      required: true,\n    },\n    maxSize: {\n      type: Number,\n      default: 0,\n    },\n    mimetypes: {\n      type: Array,\n      default: () => [],\n    },\n    automatic: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  emits: {\n    setToken(token: string) {\n      return token.length > 0;\n    },\n    delete() {\n      return true;\n    },\n  },\n  data() {\n    return {\n      progress: 0,\n      token: '',\n      error: '',\n    };\n  },\n  computed: {\n    isImage: function () {\n      return this.file.type.split('/')[0] === 'image';\n    },\n    fileUrl: function () {\n      return URL.createObjectURL(this.file);\n    },\n    humanizedSize: function () {\n      return humanizedSize(this.file.size);\n    },\n  },\n  mounted() {\n    if (this.maxSize && this.file.size > this.maxSize) {\n      this.error = this.$t('upload_entry.too_large');\n    } else if (this.mimetypes.length && !this.mimetypes.includes(this.file.type)) {\n      this.error = this.$tc('upload_entry.wrong_type', this.mimetypes.length, {types: this.mimetypes.join(', ')});\n    } else if (this.automatic) {\n      this.sendFile();\n    } else {\n      EventBus.on('upload', this.sendFile);\n    }\n  },\n  methods: {\n    revokeUrl: function (url: string) {\n      URL.revokeObjectURL(url);\n    },\n    sendFile: function () {\n      const xhr = new XMLHttpRequest();\n      xhr.upload.addEventListener('progress', (e) => {\n        this.progress = Math.round((e.loaded * 100) / e.total);\n      }, false);\n\n      xhr.open('POST', `${this.baseUrl}request-upload`, true);\n      xhr.addEventListener('readystatechange', () => {\n        if (xhr.readyState === 4 && xhr.status >= 200 && xhr.status <= 300) {\n          const response = JSON.parse(xhr.responseText) as TokenReponse;\n          this.$emit('setToken', response.token);\n        } else {\n          let detail;\n          try {\n            detail = (JSON.parse(xhr.responseText) as ErrorReponse).detail;\n          } catch (e) {\n            detail = xhr.statusText;\n          }\n          this.error = this.$t('request_error', {error: detail});\n        }\n      });\n\n      const fd = new FormData();\n      fd.append('file', this.file);\n      // Initiate a multipart/form-data upload\n      xhr.send(fd);\n    },\n  },\n});\n</script>\n","<!--\n  -\n  -   OSIS stands for Open Student Information System. It's an application\n  -   designed to manage the core business of higher education institutions,\n  -   such as universities, faculties, institutes and professional schools.\n  -   The core business involves the administration of students, teachers,\n  -   courses, programs and so on.\n  -\n  -   Copyright (C) 2015-2023 Université catholique de Louvain (http://www.uclouvain.be)\n  -\n  -   This program is free software: you can redistribute it and/or modify\n  -   it under the terms of the GNU General Public License as published by\n  -   the Free Software Foundation, either version 3 of the License, or\n  -   (at your option) any later version.\n  -\n  -   This program is distributed in the hope that it will be useful,\n  -   but WITHOUT ANY WARRANTY; without even the implied warranty of\n  -   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  -   GNU General Public License for more details.\n  -\n  -   A copy of this license - GNU General Public License - is available\n  -   at the root of the source code of this program.  If not,\n  -   see http://www.gnu.org/licenses/.\n  -\n  -->\n<template>\n  <div\n      v-if=\"maxFiles === 0 || nbUploadedFiles < maxFiles\"\n      class=\"dropzone form-group\"\n      :class=\"{hovering: isDragging}\"\n      @dragenter=\"isDragging = true\"\n  >\n    <input\n        ref=\"fileInput\"\n        type=\"file\"\n        multiple\n        :accept=\"mimetypes.length ? mimetypes.join(',') : undefined\"\n        @dragleave=\"isDragging = false\"\n        @change=\"onFilePicked\"\n    >\n    {{ uploadText || dragNDropLabel }}\n    <button\n        class=\"btn btn-default\"\n        type=\"button\"\n        @click=\"($refs.fileInput as HTMLInputElement).click()\"\n    >\n      <span class=\"glyphicon glyphicon-plus\" />\n      {{ uploadButtonText || $t('uploader.add_file_label') }}\n    </button>\n    <span v-if=\"maxSize\">\n      {{ $t('uploader.max_size_label', { size: humanizedSize(maxSize) }) }}\n    </span>\n  </div>\n\n  <ul\n      v-if=\"fileList\"\n      class=\"media-list\"\n  >\n    <UploadEntry\n        v-for=\"(file, index) in fileList\"\n        :key=\"index\"\n        :file=\"file\"\n        :base-url=\"baseUrl\"\n        :max-size=\"maxSize\"\n        :mimetypes=\"mimetypes\"\n        :automatic=\"automaticUpload\"\n        @delete=\"delete fileList[index]; delete tokens[index];\"\n        @set-token=\"tokens[index] = $event; delete fileList[index];\"\n    />\n  </ul>\n  <div\n      v-if=\"!automaticUpload && Object.values(fileList).length\"\n      class=\"text-right form-group\"\n  >\n    <button\n        class=\"btn btn-default \"\n        type=\"button\"\n        @click=\"triggerUpload\"\n    >\n      {{ $t('uploader.trigger_upload') }}\n    </button>\n  </div>\n\n  <ul class=\"media-list\">\n    <ViewEntry\n        v-for=\"(token, index) in filteredTokens\"\n        :id=\"`${name}-${index}`\"\n        :key=\"index\"\n        :value=\"token\"\n        :base-url=\"baseUrl\"\n        :editable=\"true\"\n        :editable-filename=\"editableFilename\"\n        @delete=\"delete tokens[index]\"\n        @update-token=\"tokens[index] = $event\"\n    />\n  </ul>\n\n  <input\n      v-for=\"(token, index) in Object.values(cleanedTokens)\"\n      :key=\"`${name}_${index}`\"\n      type=\"hidden\"\n      :name=\"`${name}_${index}`\"\n      :value=\"token\"\n  >\n</template>\n\n<script lang=\"ts\">\nimport {humanizedSize} from './utils';\nimport UploadEntry from './components/UploadEntry.vue';\nimport ViewEntry from './components/ViewEntry.vue';\nimport EventBus from './event-bus';\nimport {defineComponent} from 'vue';\n\nconst EVENT_NAMESPACE = 'osisdocument:';\nconst ADD_EVENT = 'add';\nconst DELETE_EVENT = 'delete';\n\nexport default defineComponent({\n  name: 'DocumentUploader',\n  components: {UploadEntry, ViewEntry},\n  props: {\n    name: {\n      type: String,\n      required: true,\n    },\n    baseUrl: {\n      type: String,\n      required: true,\n    },\n    uploadText: {\n      type: String,\n      default: null,\n    },\n    uploadButtonText: {\n      type: String,\n      default: null,\n    },\n    maxSize: {\n      type: Number,\n      default: 0,\n    },\n    automaticUpload: {\n      type: Boolean,\n      default: true,\n    },\n    editableFilename: {\n      type: Boolean,\n      default: true,\n    },\n    values: {\n      type: Array,\n      default: () => [],\n    },\n    mimetypes: {\n      type: Array,\n      default: () => [],\n    },\n    minFiles: {\n      type: Number,\n      default: 0,\n    },\n    maxFiles: {\n      type: Number,\n      default: 0,\n    },\n  },\n  data() {\n    let indexGenerated = 0;\n    return {\n      isDragging: false,\n      fileList: {} as Record<number, File>,\n      tokens: Object.fromEntries(this.values.map(f => {\n        indexGenerated++;\n        return [indexGenerated, f];\n      })) as Record<number, string | null>,\n      indexGenerated,\n    };\n  },\n  computed: {\n    /** Token list without empty tokens */\n    filteredTokens: function () {\n      return Object.fromEntries(Object.entries(this.tokens).filter(e => !!e[1])) as Record<number, string>;\n    },\n    /** Token list without infected or invalid files */\n    cleanedTokens: function () {\n      return Object.fromEntries(Object.entries(this.tokens).filter(\n          e => !!e[1] && !['FileInfectedException', 'UploadInvalidException'].includes(e[1]),\n      ));\n    },\n    /** Number of file tokens ready to be submitted */\n    nbUploadedFiles: function () {\n      return Object.values(this.cleanedTokens).length;\n    },\n    /**\n     * Customize the drag and drop button label depending on the limits\n     * @returns {string} the drag and drop label\n     */\n    dragNDropLabel: function () {\n      if (this.minFiles) {\n        if (this.minFiles === this.maxFiles) {\n          return this.$tc('uploader.specific_nb_drag_n_drop_label', this.minFiles);\n        } else if (this.maxFiles) {\n          return this.$t('uploader.min_max_drag_n_drop_label', {min: this.minFiles, max: this.maxFiles});\n        } else {\n          return this.$tc('uploader.min_drag_n_drop_label', this.minFiles);\n        }\n      } else if (this.maxFiles) {\n        return this.$tc('uploader.max_drag_n_drop_label', this.maxFiles);\n      }\n      return this.$t('uploader.drag_n_drop_label');\n    },\n  },\n  watch: {\n    cleanedTokens: {\n      handler(newTokens: Record<number, string>, oldTokens: Record<number, string>) {\n        if (JSON.stringify(oldTokens) !== JSON.stringify(newTokens)) {\n          const eventType = Object.keys(oldTokens).length > Object.keys(newTokens).length ? DELETE_EVENT : ADD_EVENT;\n          const fileEvent = new CustomEvent(EVENT_NAMESPACE + eventType, {\n            bubbles: true,\n            detail: {newTokens, oldTokens},\n          });\n          (this.$el as HTMLDivElement).dispatchEvent(fileEvent);\n        }\n      },\n    },\n  },\n  mounted() {\n    // Watch for external changes on hidden inputs\n    jQuery('> input', (this.$el as HTMLDivElement)).on('change', (event) => {\n      const $input = jQuery(event.target);\n      if (!$input.val()) {\n        // If an input is emptied, remove all\n        this.tokens = {};\n      }\n    });\n  },\n  methods: {\n    humanizedSize,\n    triggerUpload() {\n      EventBus.emit('upload');\n    },\n    onFilePicked(e: Event) {\n      const files = (e.target as HTMLInputElement).files;\n      files && Array.from(files).forEach(file => {\n        this.indexGenerated++;\n        this.fileList[this.indexGenerated] = file;\n        this.tokens[this.indexGenerated] = null;\n      });\n      this.isDragging = false;\n    },\n  },\n});\n</script>\n\n<style lang=\"scss\">\n.dropzone {\n  border: dashed 2px #8cb0cc;\n  border-radius: 5px * 2;\n  overflow: hidden;\n  transition: all 1s;\n  position: relative;\n  padding: 1em;\n  text-align: center;\n\n  &:after {\n    padding: 1em 3em;\n    display: inline-block;\n    text-align: center;\n  }\n\n  &.filled {\n    border: solid 3px #4cae4c;\n  }\n\n  input {\n    display: none;\n    position: absolute;\n    z-index: 3;\n    padding: 20px 0;\n    opacity: 0;\n    width: 100%;\n    height: 100%;\n    top: 0;\n  }\n\n  &.hovering {\n    border: dotted 3px #4cae4c;\n\n    input {\n      display: block;\n    }\n  }\n}\n</style>\n","/**\n * mock-xmlhttprequest v8.1.0\n * (c) 2022 Bertrand Guay-Paquet\n * @license ISC\n */\n/**\n * HTTP header container\n */\nclass HeadersContainer {\n    constructor(headersOrSrc) {\n        this._headers = new Map();\n        if (headersOrSrc) {\n            if (headersOrSrc instanceof HeadersContainer) {\n                // eslint-disable-next-line no-underscore-dangle\n                this._headers = new Map(headersOrSrc._headers);\n            }\n            else {\n                Object.entries(headersOrSrc).forEach(([key, value]) => this.addHeader(key, value));\n            }\n        }\n    }\n    /**\n     * Reset the container to its empty state.\n     *\n     * @returns this\n     */\n    reset() {\n        this._headers.clear();\n        return this;\n    }\n    /**\n     * @param name Header name (case insensitive)\n     * @returns Header value or null\n     */\n    getHeader(name) {\n        return this._headers.get(name.toUpperCase()) ?? null;\n    }\n    /**\n     * Get all headers as a string. Each header is on its own line. All header names are lower-case.\n     *\n     * @returns Concatenated headers\n     */\n    getAll() {\n        // Sort the header names. It's not mandated by RFC 7230 but it makes assertion testing easier\n        // and, most importantly, it is required by getAllResponseHeaders() of XMLHttpRequest.\n        // See https://xhr.spec.whatwg.org/#the-getallresponseheaders()-method\n        const headerNames = [...this._headers.keys()].sort();\n        // Combine the header values\n        const headers = headerNames.reduce((result, name) => {\n            const headerValue = this._headers.get(name);\n            return `${result}${name.toLowerCase()}: ${headerValue}\\r\\n`;\n        }, '');\n        return headers;\n    }\n    /**\n     * @returns All headers as an object. The header names are in lower-case.\n     */\n    getHash() {\n        const headers = {};\n        this._headers.forEach((value, name) => {\n            headers[name.toLowerCase()] = value;\n        });\n        return headers;\n    }\n    /**\n     * Add a header value, combining it with any previous value for the same header name.\n     *\n     * @param name Header name\n     * @param value Header value\n     * @returns this\n     */\n    addHeader(name, value) {\n        name = name.toUpperCase();\n        value = value ?? '';\n        const currentValue = this._headers.get(name);\n        if (currentValue !== undefined) {\n            value = `${currentValue}, ${value}`;\n        }\n        this._headers.set(name, value);\n        return this;\n    }\n}\n\nexport { HeadersContainer as default };\n//# sourceMappingURL=HeadersContainer.mjs.map\n","/**\n * mock-xmlhttprequest v8.1.0\n * (c) 2022 Bertrand Guay-Paquet\n * @license ISC\n */\n/**\n * A request produced by MockXhr.send() and methods to respond to it.\n *\n * Each call to MockXhr.send() on an instance creates a new instance of MockXhrRequest. When there\n * are multiple active MockXhrRequest instances for the same MockXhr instance, only the response to\n * the last one is considered. Responses to previous MockXhrRequests are ignored.\n */\nclass MockXhrRequest {\n    constructor(_requestData, _responseReceiver) {\n        this._requestData = _requestData;\n        this._responseReceiver = _responseReceiver;\n    }\n    get requestData() { return this._requestData; }\n    /**\n     * @returns Request headers container\n     */\n    get requestHeaders() { return this._requestData.requestHeaders; }\n    get method() { return this._requestData.method; }\n    get url() { return this._requestData.url; }\n    get body() { return this._requestData.body; }\n    get withCredentials() { return this._requestData.withCredentials; }\n    /**\n     * Note: this isn't completely accurate for a multipart/form-data encoded FormData request body.\n     * MockXhr not consider headers, encoding, and other factors that influence the request body size\n     * of non-mocked XMLHttpRequest. You can consider the value returned by this method as a floor\n     * value for the request body size. This can still be useful to simulate upload progress events.\n     *\n     * @returns Request body's total byte size\n     */\n    getRequestBodySize() { return this._requestData.getRequestBodySize(); }\n    /**\n     * Fire a request upload progress event.\n     *\n     * @param transmitted Transmitted bytes\n     */\n    uploadProgress(transmitted) {\n        this._responseReceiver.uploadProgress(this._requestData, transmitted);\n    }\n    /**\n     * Complete response method that sets the response headers and body. Changes the request's\n     * readyState to DONE.\n     *\n     * @param status Response http status (default 200)\n     * @param headers Name-value headers (optional)\n     * @param body Response body (default null)\n     * @param statusText Response http status text (optional)\n     */\n    respond(status, headers, body, statusText) {\n        this.setResponseHeaders(status, headers, statusText);\n        this.setResponseBody(body);\n    }\n    /**\n     * Set the response headers. Changes the request's readyState to HEADERS_RECEIVED.\n     *\n     * @param status Response http status (default 200)\n     * @param headers Name-value headers (optional)\n     * @param statusText Response http status text (optional)\n     */\n    setResponseHeaders(status, headers, statusText) {\n        this._responseReceiver.setResponseHeaders(this._requestData, status, headers, statusText);\n    }\n    /**\n     * Fire a response progress event. Changes the request's readyState to LOADING.\n     *\n     * @param transmitted Transmitted bytes\n     */\n    downloadProgress(transmitted) {\n        this._responseReceiver.downloadProgress(this._requestData, transmitted);\n    }\n    /**\n     * Set the response body. Changes the request's readyState to DONE.\n     *\n     * @param body Response body (default null)\n     */\n    setResponseBody(body = null) {\n        this._responseReceiver.setResponseBody(this._requestData, body);\n    }\n    /**\n     * Simulate a network error. Changes the request's readyState to DONE.\n     */\n    setNetworkError() {\n        this._responseReceiver.setNetworkError(this._requestData);\n    }\n    /**\n     * Simulate a request timeout. Changes the request's readyState to DONE.\n     */\n    setRequestTimeout() {\n        this._responseReceiver.setRequestTimeout(this._requestData);\n    }\n}\n\nexport { MockXhrRequest as default };\n//# sourceMappingURL=MockXhrRequest.mjs.map\n","/**\n * mock-xmlhttprequest v8.1.0\n * (c) 2022 Bertrand Guay-Paquet\n * @license ISC\n */\nfunction getBodyByteSize(body) {\n    if (!body) {\n        return 0;\n    }\n    if (typeof body === 'string') {\n        return getStringByteLength(body);\n    }\n    else if ((typeof FormData !== 'undefined' && body instanceof FormData)\n        || (body.constructor && body.constructor.name === 'FormData')) {\n        // A FormData has field-value pairs. This testing code only sums the individual sizes of the\n        // values. The full multipart/form-data encoding also adds headers, encoding, etc. which we\n        // don't reproduce here.\n        return [...body.values()].reduce((sum, value) => {\n            const valueSize = value.size ?? getStringByteLength(String(value.toString()));\n            return sum + valueSize;\n        }, 0);\n    }\n    // Handles Blob and BufferSource\n    return body.size || body.byteLength || 0;\n}\nfunction getStringByteLength(string) {\n    // Compute the byte length of the string (which is not the same as string.length)\n    // Use Blob if available (i.e. in the browser) and Buffer otherwise.\n    return typeof Blob !== 'undefined' ? new Blob([string]).size : Buffer.byteLength(string);\n}\nconst isTokenRegEx = /^[A-Za-z0-9!#$%&'*+\\-.^_`|~]+$/;\n/**\n * See https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.6\n * @param token Token\n * @returns Whether token is a valid token\n */\nfunction isToken(token) {\n    return typeof token === 'string' && isTokenRegEx.test(token);\n}\n/**\n * https://datatracker.ietf.org/doc/html/rfc7230#section-3.2\n * @param headerName Header name\n * @returns Whether headerName is a valid header name\n */\nfunction isHeaderName(headerName) {\n    return isToken(headerName);\n}\n/**\n * https://fetch.spec.whatwg.org/#header-value\n * @param headerValue Header value\n * @returns Whether headerValue is a valid header value\n */\nfunction isHeaderValue(headerValue) {\n    return typeof headerValue === 'string'\n        && headerValue.trim().length === headerValue.length\n        && headerValue.indexOf('\\0') === -1;\n}\n// Disallowed request headers for setRequestHeader()\nconst forbiddenHeaders = [\n    'Accept-Charset',\n    'Accept-Encoding',\n    'Access-Control-Request-Headers',\n    'Access-Control-Request-Method',\n    'Connection',\n    'Content-Length',\n    'Cookie',\n    'Cookie2',\n    'Date',\n    'DNT',\n    'Expect',\n    'Host',\n    'Keep-Alive',\n    'Origin',\n    'Referer',\n    'TE',\n    'Trailer',\n    'Transfer-Encoding',\n    'Upgrade',\n    'Via',\n];\nconst forbiddenHeaderRegEx = new RegExp(`^(${forbiddenHeaders.join('|')}|Proxy-.*|Sec-.*)$`, 'i');\n/**\n * See https://fetch.spec.whatwg.org/#forbidden-header-name\n *\n * @param name Header name\n * @returns Whether the request header name is forbidden for XMLHttpRequest\n */\nfunction isRequestHeaderForbidden(name) {\n    return forbiddenHeaderRegEx.test(name);\n}\n/**\n * See https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.1\n * @param method Method name\n * @returns Whether method is a valid request method\n */\nfunction isRequestMethod(method) {\n    return isToken(method);\n}\nconst isRequestMethodForbiddenRegEx = /^(CONNECT|TRACE|TRACK)$/i;\n/**\n * See https://fetch.spec.whatwg.org/#forbidden-method\n *\n * @param method Method name\n * @returns Whether the request method is forbidden for XMLHttpRequest\n */\nfunction isRequestMethodForbidden(method) {\n    return isRequestMethodForbiddenRegEx.test(method);\n}\n// Normalize method names as described in open()\n// https://xhr.spec.whatwg.org/#the-open()-method\nconst upperCaseMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'OPTIONS',\n    'POST',\n    'PUT',\n];\nconst upperCaseMethodsRegEx = new RegExp(`^(${upperCaseMethods.join('|')})$`, 'i');\n/**\n * See https://fetch.spec.whatwg.org/#concept-method-normalize\n *\n * @param method HTTP method name\n * @returns Normalized method name\n */\nfunction normalizeHTTPMethodName(method) {\n    if (upperCaseMethodsRegEx.test(method)) {\n        method = method.toUpperCase();\n    }\n    return method;\n}\n// Status code reason phrases from RFC 7231 §6.1, RFC 4918, RFC 5842, RFC 6585 and RFC 7538\nconst statusTexts = {\n    100: 'Continue',\n    101: 'Switching Protocols',\n    200: 'OK',\n    201: 'Created',\n    202: 'Accepted',\n    203: 'Non-Authoritative Information',\n    204: 'No Content',\n    205: 'Reset Content',\n    206: 'Partial Content',\n    207: 'Multi-Status',\n    208: 'Already Reported',\n    300: 'Multiple Choices',\n    301: 'Moved Permanently',\n    302: 'Found',\n    303: 'See Other',\n    304: 'Not Modified',\n    305: 'Use Proxy',\n    307: 'Temporary Redirect',\n    308: 'Permanent Redirect',\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    402: 'Payment Required',\n    403: 'Forbidden',\n    404: 'Not Found',\n    405: 'Method Not Allowed',\n    406: 'Not Acceptable',\n    407: 'Proxy Authentication Required',\n    408: 'Request Timeout',\n    409: 'Conflict',\n    410: 'Gone',\n    411: 'Length Required',\n    412: 'Precondition Failed',\n    413: 'Payload Too Large',\n    414: 'URI Too Long',\n    415: 'Unsupported Media Type',\n    416: 'Range Not Satisfiable',\n    417: 'Expectation Failed',\n    422: 'Unprocessable Entity',\n    423: 'Locked',\n    424: 'Failed Dependency',\n    426: 'Upgrade Required',\n    428: 'Precondition Required',\n    429: 'Too Many Requests',\n    431: 'Request Header Fields Too Large',\n    500: 'Internal Server Error',\n    501: 'Not Implemented',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    504: 'Gateway Timeout',\n    505: 'HTTP Version Not Supported',\n    507: 'Insufficient Storage',\n    511: 'Network Authentication Required', // RFC 6585\n};\n/**\n * @param status HTTP status code\n * @returns Status text\n */\nfunction getStatusText(status) {\n    return statusTexts[status] ?? 'Unknown Status';\n}\n/**\n * @param headerValue Header value\n * @returns Split header value list or null\n * @see {@link https://fetch.spec.whatwg.org/#concept-header-list-get-decode-split}\n */\nfunction decodeAndSplitHeaderValue(headerValue) {\n    if (headerValue === null) {\n        return null;\n    }\n    const values = [];\n    const codePoints = [...headerValue];\n    function sliceAndTrimString(start, end) {\n        // Remove all HTTP tab or space from the start and end of value\n        while (start < end\n            && (codePoints[start] === ' ' || codePoints[start] === '\\t')) {\n            start += 1;\n        }\n        while (start < end\n            && (codePoints[end - 1] === ' ' || codePoints[end - 1] === '\\t')) {\n            end -= 1;\n        }\n        return codePoints.slice(start, end).join('');\n    }\n    let currentValueStart = 0;\n    let inQuotedString = false;\n    let inQuotedStringEscape = false;\n    codePoints.forEach((codePoint, index) => {\n        if (inQuotedString) {\n            if (inQuotedStringEscape) {\n                inQuotedStringEscape = false;\n            }\n            else if (codePoint === '\"') {\n                inQuotedString = false;\n            }\n            else if (codePoint === '\\\\') {\n                inQuotedStringEscape = true;\n            }\n            return;\n        }\n        else if (codePoint === '\"') {\n            inQuotedString = true;\n            return;\n        }\n        else if (codePoint !== ',') {\n            return;\n        }\n        values.push(sliceAndTrimString(currentValueStart, index));\n        currentValueStart = index + 1;\n    });\n    if (currentValueStart < codePoints.length) {\n        values.push(sliceAndTrimString(currentValueStart, codePoints.length));\n    }\n    else {\n        values.push('');\n    }\n    return values;\n}\nconst isDigitsRegEx = /^\\d+$/;\n/**\n * @param headerValue Header value\n * @returns Extracted length, null, or false (failure)\n * @see {@link https://fetch.spec.whatwg.org/#header-list-extract-a-length}\n */\nfunction extractLengthFromHeader(headerValue) {\n    if (headerValue === null) {\n        return null;\n    }\n    const values = decodeAndSplitHeaderValue(headerValue);\n    if (values === null) {\n        return null;\n    }\n    const value = values[0];\n    if (values.slice(1).some((other) => other !== value)) {\n        return false;\n    }\n    if (value === '' || !isDigitsRegEx.test(value)) {\n        return null;\n    }\n    return Number(value);\n}\n\nexport { decodeAndSplitHeaderValue, extractLengthFromHeader, getBodyByteSize, getStatusText, isHeaderName, isHeaderValue, isRequestHeaderForbidden, isRequestMethod, isRequestMethodForbidden, normalizeHTTPMethodName, upperCaseMethods };\n//# sourceMappingURL=Utils.mjs.map\n","/**\n * mock-xmlhttprequest v8.1.0\n * (c) 2022 Bertrand Guay-Paquet\n * @license ISC\n */\nimport HeadersContainer from './HeadersContainer.mjs';\nimport { getBodyByteSize } from './Utils.mjs';\n\n/**\n * Request parameters from MockXhr.send()\n */\nclass RequestData {\n    constructor(_requestHeaders, _method, _url, _body = null, _credentialsMode = false) {\n        this._requestHeaders = _requestHeaders;\n        this._method = _method;\n        this._url = _url;\n        this._body = _body;\n        this._credentialsMode = _credentialsMode;\n    }\n    /**\n     * @returns Request headers container\n     */\n    get requestHeaders() { return new HeadersContainer(this._requestHeaders); }\n    get method() { return this._method; }\n    get url() { return this._url; }\n    get body() { return this._body; }\n    get withCredentials() { return this._credentialsMode; }\n    /**\n     * Note: this isn't completely accurate for a multipart/form-data encoded FormData request body.\n     * MockXhr not consider headers, encoding, and other factors that influence the request body size\n     * of non-mocked XMLHttpRequest. You can consider the value returned by this method as a floor\n     * value for the request body size. This can still be useful to simulate upload progress events.\n     *\n     * @returns Request body's total byte size\n     */\n    getRequestBodySize() {\n        return getBodyByteSize(this.body);\n    }\n}\n\nexport { RequestData as default };\n//# sourceMappingURL=RequestData.mjs.map\n","/**\n * mock-xmlhttprequest v8.1.0\n * (c) 2022 Bertrand Guay-Paquet\n * @license ISC\n */\n/**\n * XMLHttpRequest Event\n */\nclass XhrEvent {\n    /**\n     * @param type Event type\n     */\n    constructor(type) {\n        this.type = type;\n    }\n}\n\nexport { XhrEvent as default };\n//# sourceMappingURL=XhrEvent.mjs.map\n","/**\n * mock-xmlhttprequest v8.1.0\n * (c) 2022 Bertrand Guay-Paquet\n * @license ISC\n */\nimport XhrEvent from './XhrEvent.mjs';\n\n/**\n * XMLHttpRequest ProgressEvent\n */\nclass XhrProgressEvent extends XhrEvent {\n    /**\n     * @param type Event type\n     * @param loaded Loaded bytes\n     * @param total Total bytes\n     */\n    constructor(type, loaded = 0, total = 0) {\n        super(type);\n        this.loaded = loaded;\n        this.total = total;\n        this.lengthComputable = total > 0;\n    }\n}\n\nexport { XhrProgressEvent as default };\n//# sourceMappingURL=XhrProgressEvent.mjs.map\n","/**\n * mock-xmlhttprequest v8.1.0\n * (c) 2022 Bertrand Guay-Paquet\n * @license ISC\n */\n/**\n * Implementation of XMLHttpRequestEventTarget. A target for dispatching events.\n *\n * See https://xhr.spec.whatwg.org/#xmlhttprequesteventtarget\n */\nclass XhrEventTarget {\n    constructor(eventContext) {\n        this._eventContext = eventContext ?? this;\n        this._listeners = new Map();\n    }\n    get onabort() { return this._getEventHandlerProperty('abort'); }\n    set onabort(value) { this._setEventHandlerProperty('abort', value); }\n    get onerror() { return this._getEventHandlerProperty('error'); }\n    set onerror(value) { this._setEventHandlerProperty('error', value); }\n    get onload() { return this._getEventHandlerProperty('load'); }\n    set onload(value) { this._setEventHandlerProperty('load', value); }\n    get onloadend() { return this._getEventHandlerProperty('loadend'); }\n    set onloadend(value) { this._setEventHandlerProperty('loadend', value); }\n    get onloadstart() { return this._getEventHandlerProperty('loadstart'); }\n    set onloadstart(value) { this._setEventHandlerProperty('loadstart', value); }\n    get onprogress() { return this._getEventHandlerProperty('progress'); }\n    set onprogress(value) { this._setEventHandlerProperty('progress', value); }\n    get ontimeout() { return this._getEventHandlerProperty('timeout'); }\n    set ontimeout(value) { this._setEventHandlerProperty('timeout', value); }\n    /**\n     * @returns Whether any event listener is registered\n     */\n    hasListeners() {\n        return [...this._listeners.values()].some((listeners) => listeners.length > 0);\n    }\n    addEventListener(type, listener, options) {\n        if (listener) {\n            const listenerEntry = makeListenerEntry(listener, false, options);\n            const listeners = this._listeners.get(type) ?? [];\n            // If eventTarget’s event listener list does not contain an event listener whose type is\n            // listener’s type, callback is listener’s callback, and capture is listener’s capture, then\n            // append listener to eventTarget’s event listener list.\n            // See https://dom.spec.whatwg.org/#add-an-event-listener\n            if (listeners.every(({ isEventHandlerProperty, listener, useCapture }) => {\n                return isEventHandlerProperty\n                    || listenerEntry.listener !== listener\n                    || listenerEntry.useCapture !== useCapture;\n            })) {\n                listeners.push(listenerEntry);\n                this._listeners.set(type, listeners);\n            }\n        }\n    }\n    removeEventListener(type, listener, options) {\n        if (listener) {\n            const listeners = this._listeners.get(type);\n            if (listeners) {\n                const listenerEntry = makeListenerEntry(listener, false, options);\n                const index = listeners.findIndex(({ isEventHandlerProperty, listener, useCapture }) => {\n                    return !isEventHandlerProperty\n                        && listenerEntry.listener === listener\n                        && listenerEntry.useCapture === useCapture;\n                });\n                if (index >= 0) {\n                    listeners[index].removed = true;\n                    listeners.splice(index, 1);\n                }\n            }\n        }\n    }\n    /**\n     * Calls all the listeners for the event.\n     *\n     * @param event Event\n     * @returns Always true since none of the xhr event are cancelable\n     */\n    dispatchEvent(event) {\n        // Only the event listeners registered at this point should be called. Storing them here avoids\n        // problems with callbacks that add or remove listeners.\n        const listeners = this._listeners.get(event.type);\n        if (listeners) {\n            [...listeners].forEach((listenerEntry) => {\n                if (!listenerEntry.removed) {\n                    if (listenerEntry.once) {\n                        const index = listeners.indexOf(listenerEntry);\n                        if (index >= 0) {\n                            listeners.splice(index, 1);\n                        }\n                    }\n                    if (typeof listenerEntry.listener === 'function') {\n                        listenerEntry.listener.call(this._eventContext, event);\n                    }\n                    else {\n                        listenerEntry.listener.handleEvent(event);\n                    }\n                }\n            });\n        }\n        return true;\n    }\n    _getEventHandlerProperty(event) {\n        const listeners = this._listeners.get(event);\n        if (listeners) {\n            const entry = listeners.find((entry) => entry.isEventHandlerProperty);\n            if (entry) {\n                return entry.listener;\n            }\n        }\n        return null;\n    }\n    _setEventHandlerProperty(event, value) {\n        const listeners = this._listeners.get(event);\n        if (listeners) {\n            const index = listeners.findIndex((entry) => entry.isEventHandlerProperty);\n            if (index >= 0) {\n                if (listeners[index].listener === value) {\n                    // no change\n                    return;\n                }\n                listeners[index].removed = true;\n                listeners.splice(index, 1);\n            }\n        }\n        if (value) {\n            const listenerEntry = makeListenerEntry(value, true);\n            if (listeners) {\n                listeners.push(listenerEntry);\n            }\n            else {\n                this._listeners.set(event, [listenerEntry]);\n            }\n        }\n    }\n}\nfunction makeListenerEntry(listener, isEventHandlerProperty, options) {\n    const optionsIsBoolean = typeof options === 'boolean';\n    return {\n        listener,\n        isEventHandlerProperty,\n        useCapture: optionsIsBoolean ? options : !!options?.capture,\n        once: optionsIsBoolean ? false : !!options?.once,\n        removed: false,\n    };\n}\n\nexport { XhrEventTarget as default };\n//# sourceMappingURL=XhrEventTarget.mjs.map\n","/**\n * mock-xmlhttprequest v8.1.0\n * (c) 2022 Bertrand Guay-Paquet\n * @license ISC\n */\nimport HeadersContainer from './HeadersContainer.mjs';\nimport MockXhrRequest from './MockXhrRequest.mjs';\nimport RequestData from './RequestData.mjs';\nimport XhrEvent from './XhrEvent.mjs';\nimport XhrProgressEvent from './XhrProgressEvent.mjs';\nimport { extractLengthFromHeader, getBodyByteSize, isRequestMethod, isRequestMethodForbidden, normalizeHTTPMethodName, isHeaderName, isHeaderValue, isRequestHeaderForbidden, getStatusText } from './Utils.mjs';\nimport XhrEventTarget from './XhrEventTarget.mjs';\n\nconst RESPONSE_TYPES = ['', 'arraybuffer', 'blob', 'document', 'json', 'text'];\n/**\n * XMLHttpRequest mock for testing.\n * Based on https://xhr.spec.whatwg.org version '15 August 2022'.\n *\n * Supports:\n *  - Events and states\n *  - open(), setRequestHeader(), send() and abort()\n *  - Upload and download progress events\n *  - Response status, statusText, headers and body\n *  - The timeout attribute (can be disabled)\n *  - Simulating a network error (see setNetworkError())\n *  - Simulating a request timeout (see setRequestTimeout())\n *\n * Partial support:\n *  - overrideMimeType(): throws when required, but has no other effect.\n *  - responseType: '', 'text' and 'json' are fully supported. The responseType values have no\n *    effect on the response body passed to setResponseBody().\n *  - responseXml: the response body is not converted to a document response. To get a document\n *    response, pass it directly as the response body in setResponseBody().\n *  - responseUrl: the final request URL after redirects isn't automatically set. This can be\n *    emulated in a request handler.\n *\n * Not supported:\n * - Synchronous requests (i.e. async set to false in open())\n * - Parsing the request URL in open() and throwing SyntaxError on failure.\n */\nclass MockXhr extends XhrEventTarget {\n    constructor() {\n        super();\n        this.UNSENT = MockXhr.UNSENT;\n        this.OPENED = MockXhr.OPENED;\n        this.HEADERS_RECEIVED = MockXhr.HEADERS_RECEIVED;\n        this.LOADING = MockXhr.LOADING;\n        this.DONE = MockXhr.DONE;\n        this._authorRequestHeaders = new HeadersContainer();\n        this._readyState = MockXhr.UNSENT;\n        this._timeout = 0;\n        this._crossOriginCredentials = false;\n        this._uploadObject = new XhrEventTarget(this);\n        this.responseURL = '';\n        this._responseType = '';\n        this._response = makeNetworkErrorResponse();\n        this._timeoutReference = 0;\n        this.onreadystatechange = null;\n        this.timeoutEnabled = true;\n        MockXhr.onCreate?.(this);\n    }\n    get onreadystatechange() {\n        return this._getEventHandlerProperty('readystatechange');\n    }\n    set onreadystatechange(value) {\n        this._setEventHandlerProperty('readystatechange', value);\n    }\n    /**\n     * @returns The current active request, if any\n     */\n    get currentRequest() { return this._currentRequest; }\n    /**\n     * @returns All response headers as an object. The header names are in lower-case.\n     */\n    getResponseHeadersHash() {\n        return this._response.headers.getHash();\n    }\n    //------------------------\n    // MockXhrResponseReceiver\n    //------------------------\n    /**\n     * Fire a request upload progress event.\n     *\n     * @param request Originating request\n     * @param requestBodyTransmitted Bytes transmitted\n     * @see {@link https://xhr.spec.whatwg.org/#the-send()-method \"processRequestBodyChunkLength\" steps}\n     */\n    uploadProgress(request, requestBodyTransmitted) {\n        // Only act if the originating request is the current active request\n        if (this._currentRequest?.requestData === request) {\n            if (!this._sendFlag) {\n                throw new Error('Mock usage error detected: call send() first (the \"send() flag\" is not set)');\n            }\n            if (this._uploadCompleteFlag) {\n                throw new Error('Mock usage error detected: upload already completed (the \"upload complete flag\" is set)');\n            }\n            const requestBodyLength = request.getRequestBodySize();\n            if (requestBodyTransmitted > requestBodyLength) {\n                throw new Error(`Mock usage error detected: upload progress \"requestBodyTransmitted\" (${requestBodyTransmitted}) `\n                    + `is greater than \"requestBodyLength\" (${requestBodyLength})`);\n            }\n            // Don't throttle events based on elapsed time because it would make tests much slower and\n            // harder to write.\n            if (this._uploadListenerFlag) {\n                // If no listeners were registered before send(), no upload events should be fired.\n                this._fireUploadProgressEvent('progress', requestBodyTransmitted, requestBodyLength);\n            }\n        }\n    }\n    /**\n     * Set the response headers. Changes the request's readyState to HEADERS_RECEIVED.\n     *\n     * @param request Originating request\n     * @param status Response http status (default 200)\n     * @param headers Name-value headers (optional)\n     * @param statusText Response http status text (optional)\n     */\n    setResponseHeaders(request, status, headers, statusText) {\n        // Only act if the originating request is the current active request\n        if (this._currentRequest?.requestData === request) {\n            if (!this._sendFlag) {\n                throw new Error('Mock usage error detected: call send() first (the \"send() flag\" is not set)');\n            }\n            if (this._readyState !== MockXhr.OPENED) {\n                throw new Error(`Mock usage error detected: readyState is ${this._readyState}, but it must be OPENED (${MockXhr.OPENED})`);\n            }\n            if (request.body) {\n                this._processRequestEndOfBody(request.getRequestBodySize(), request.getRequestBodySize());\n            }\n            status = typeof status === 'number' ? status : 200;\n            const statusMessage = statusText ?? getStatusText(status);\n            const responseHeaders = new HeadersContainer(headers);\n            const contentLength = extractLengthFromHeader(responseHeaders.getHeader('Content-Length'));\n            this._processResponse({\n                status,\n                statusMessage,\n                headers: responseHeaders,\n                length: typeof contentLength === 'number' ? contentLength : 0,\n            });\n        }\n    }\n    /**\n     * Fire a response progress event. Changes the request's readyState to LOADING.\n     *\n     * @param request Originating request\n     * @param receivedBytesLength Received bytes' length\n     * @see {@link https://xhr.spec.whatwg.org/#the-send()-method \"processBodyChunk\" steps}\n     */\n    downloadProgress(request, receivedBytesLength) {\n        // Only act if the originating request is the current active request\n        if (this._currentRequest?.requestData === request) {\n            if (this._readyState !== MockXhr.HEADERS_RECEIVED\n                && this._readyState !== MockXhr.LOADING) {\n                throw new Error(`Mock usage error detected: readyState is ${this._readyState}, but it must be `\n                    + `HEADERS_RECEIVED (${MockXhr.HEADERS_RECEIVED}) or LOADING (${MockXhr.LOADING})`);\n            }\n            if (this._readyState === MockXhr.HEADERS_RECEIVED) {\n                this._readyState = MockXhr.LOADING;\n            }\n            // As stated in https://xhr.spec.whatwg.org/#the-send()-method\n            // Web compatibility is the reason readystatechange fires more often than state changes.\n            this._fireReadyStateChangeEvent();\n            this._fireProgressEvent('progress', receivedBytesLength, this._response.length);\n        }\n    }\n    /**\n     * Set the response body. Changes the request's readyState to DONE.\n     *\n     * @param request Originating request\n     * @param body Response body\n     */\n    setResponseBody(request, body) {\n        // Only act if the originating request is the current active request\n        if (this._currentRequest?.requestData === request) {\n            if (!this._sendFlag) {\n                throw new Error('Mock usage error detected: call send() first (the \"send() flag\" is not set)');\n            }\n            if (this._readyState !== MockXhr.OPENED\n                && this._readyState !== MockXhr.HEADERS_RECEIVED\n                && this._readyState !== MockXhr.LOADING) {\n                throw new Error(`Mock usage error detected: readyState is ${this._readyState}, but it must be `\n                    + `OPENED (${MockXhr.OPENED}), HEADERS_RECEIVED (${MockXhr.HEADERS_RECEIVED}) or LOADING (${MockXhr.LOADING})`);\n            }\n            if (this._readyState === MockXhr.OPENED) {\n                // Apply default \"200 - OK\" response headers with a Content-Length if the user didn't call\n                // setResponseHeaders() before this point.\n                const headers = { 'content-length': String(getBodyByteSize(body)) };\n                this.setResponseHeaders(request, 200, headers);\n            }\n            // As stated in https://xhr.spec.whatwg.org/#the-send()-method\n            // Web compatibility is the reason readystatechange fires more often than\n            // state changes.\n            this._readyState = MockXhr.LOADING;\n            this._fireReadyStateChangeEvent();\n            this._response.body = body ?? null;\n            this._handleResponseEndOfBody();\n        }\n    }\n    /**\n     * Simulate a network error. Changes the request's readyState to DONE.\n     *\n     * @param request Originating request\n     */\n    setNetworkError(request) {\n        // Only act if the originating request is the current active request\n        if (this._currentRequest?.requestData === request) {\n            if (!this._sendFlag) {\n                throw new Error('Mock usage error detected: call send() first (the \"send() flag\" is not set)');\n            }\n            this._processResponse(makeNetworkErrorResponse());\n        }\n    }\n    /**\n     * Simulate a request timeout. Changes the request's readyState to DONE.\n     *\n     * @param request Originating request\n     */\n    setRequestTimeout(request) {\n        // Only act if the originating request is the current active request\n        if (this._currentRequest?.requestData === request) {\n            if (!this._sendFlag) {\n                throw new Error('Mock usage error detected: call send() first (the \"send() flag\" is not set)');\n            }\n            if (this.timeout === 0) {\n                throw new Error('Mock usage error detected: the timeout attribute must be greater than 0 for a timeout to occur');\n            }\n            this._timedOutFlag = true;\n            this._terminateFetchController();\n            this._processResponse(makeNetworkErrorResponse());\n        }\n    }\n    //-------\n    // States\n    //-------\n    /**\n     * @returns Client's state\n     * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-readystate}\n     */\n    get readyState() { return this._readyState; }\n    //--------\n    // Request\n    //--------\n    /**\n     * Set the request method and url.\n     *\n     * @param method Request HTTP method (GET, POST, etc.)\n     * @param url Request url\n     * @param async Async request flag (only true or omitted is supported)\n     * @see {@link https://xhr.spec.whatwg.org/#the-open()-method}\n     */\n    open(method, url, async) {\n        if (!async && arguments.length > 2) {\n            throw new Error('async = false is not supported.');\n        }\n        if (!isRequestMethod(method)) {\n            throwError('SyntaxError', `Method \"${method}\" is not a method.`);\n        }\n        if (isRequestMethodForbidden(method)) {\n            throwError('SecurityError', `Method \"${method}\" forbidden.`);\n        }\n        method = normalizeHTTPMethodName(method);\n        // Skip parsing the url and setting the username and password\n        this._terminateFetchController();\n        // Set variables\n        this._sendFlag = false;\n        this._uploadListenerFlag = false;\n        this._requestMethod = method;\n        this._requestUrl = url.toString();\n        this._authorRequestHeaders.reset();\n        this._response = makeNetworkErrorResponse();\n        if (this._readyState !== MockXhr.OPENED) {\n            this._readyState = MockXhr.OPENED;\n            this._fireReadyStateChangeEvent();\n        }\n    }\n    /**\n     * Add a request header value.\n     *\n     * @param name Header name\n     * @param value Header value\n     * @see {@link https://xhr.spec.whatwg.org/#the-setrequestheader()-method}\n     */\n    setRequestHeader(name, value) {\n        if (this._readyState !== MockXhr.OPENED || this._sendFlag) {\n            throwError('InvalidStateError');\n        }\n        if (typeof name !== 'string' || typeof value !== 'string') {\n            throw new SyntaxError();\n        }\n        // Normalize value\n        value = value.trim();\n        if (!isHeaderName(name)) {\n            throwError('SyntaxError', `Name \"${name}\" is not a header name.`);\n        }\n        else if (!isHeaderValue(value)) {\n            throwError('SyntaxError', `Value \"${value}\" is not a header value.`);\n        }\n        if (isRequestHeaderForbidden(name)) {\n            return;\n        }\n        this._authorRequestHeaders.addHeader(name, value);\n    }\n    /**\n     * @returns timeout attribute\n     * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-timeout}\n     */\n    get timeout() { return this._timeout; }\n    /**\n     * @param value timeout value\n     * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-timeout}\n     */\n    set timeout(value) {\n        this._timeout = value;\n        // Use this._getPrototype() to get the value of timeoutEnabled on the most derived class'\n        // prototype. This allows overriding from a derived class.\n        if (this._sendFlag && this.timeoutEnabled && this._getPrototype().timeoutEnabled) {\n            this._scheduleRequestTimeout();\n        }\n    }\n    /**\n     * @returns withCredentials attribute\n     * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-withcredentials}\n     */\n    get withCredentials() { return this._crossOriginCredentials; }\n    /**\n     * @param value withCredentials value\n     * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-withcredentials}\n     */\n    set withCredentials(value) {\n        if ((this._readyState !== MockXhr.UNSENT && this._readyState !== MockXhr.OPENED)\n            || this._sendFlag) {\n            throwError('InvalidStateError');\n        }\n        this._crossOriginCredentials = !!value;\n    }\n    /**\n     * @returns upload attribute\n     * @see {@link https://xhr.spec.whatwg.org/#the-upload-attribute}\n     */\n    get upload() { return this._uploadObject; }\n    /**\n     * Initiate the request.\n     *\n     * @param body Request body\n     * @see {@link https://xhr.spec.whatwg.org/#the-send()-method}\n     */\n    send(body = null) {\n        if (this._readyState !== MockXhr.OPENED || this._sendFlag) {\n            throwError('InvalidStateError');\n        }\n        if (this._requestMethod === 'GET' || this._requestMethod === 'HEAD') {\n            body = null;\n        }\n        if (body !== null) {\n            let extractedContentType = null;\n            // Document body type not supported\n            // https://fetch.spec.whatwg.org/#bodyinit-safely-extract\n            {\n                let contentType = null;\n                if (typeof body === 'string') {\n                    contentType = 'text/plain;charset=UTF-8';\n                }\n                else if (typeof FormData !== 'undefined' && body instanceof FormData) {\n                    contentType = 'multipart/form-data; boundary=-----MochXhr1234';\n                }\n                else if (body.type) {\n                    // As specified for Blob\n                    contentType = body.type;\n                }\n                extractedContentType = contentType;\n            }\n            const originalAuthorContentType = this._authorRequestHeaders.getHeader('Content-Type');\n            if (originalAuthorContentType !== null) ;\n            else if (extractedContentType !== null) {\n                this._authorRequestHeaders.addHeader('Content-Type', extractedContentType);\n            }\n        }\n        this._uploadListenerFlag = this._uploadObject.hasListeners();\n        const requestData = new RequestData(new HeadersContainer(this._authorRequestHeaders), this._requestMethod, this._requestUrl, body, this._crossOriginCredentials);\n        const req = new MockXhrRequest(requestData, this);\n        this._uploadCompleteFlag = false;\n        this._timedOutFlag = false;\n        this._uploadCompleteFlag = req.body === null;\n        this._sendFlag = true;\n        this._fireProgressEvent('loadstart', 0, 0);\n        if (!this._uploadCompleteFlag && this._uploadListenerFlag) {\n            this._fireUploadProgressEvent('loadstart', 0, req.getRequestBodySize());\n        }\n        if (this._readyState !== MockXhr.OPENED || !this._sendFlag) {\n            return;\n        }\n        // Other interactions are triggered by the mock's MockXhrResponseReceiver API\n        this._currentRequest = req;\n        this._timeoutReference = Date.now();\n        this._scheduleRequestTimeout();\n        this._callOnSend(MockXhr.onSend);\n        const prototype = this._getPrototype();\n        if (prototype !== MockXhr) {\n            this._callOnSend(prototype.onSend);\n        }\n        this._callOnSend(this.onSend);\n    }\n    /**\n     * Abort the request.\n     * @see {@link https://xhr.spec.whatwg.org/#the-abort()-method}\n     */\n    abort() {\n        this._terminateFetchController();\n        if ((this._readyState === MockXhr.OPENED && this._sendFlag)\n            || this._readyState === MockXhr.HEADERS_RECEIVED\n            || this._readyState === MockXhr.LOADING) {\n            this._requestErrorSteps('abort');\n        }\n        if (this._readyState === MockXhr.DONE) {\n            // No readystatechange event is dispatched.\n            this._readyState = MockXhr.UNSENT;\n            this._response = makeNetworkErrorResponse();\n        }\n    }\n    //---------\n    // Response\n    //---------\n    /**\n     * @returns status attribute\n     * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-status}\n     */\n    get status() { return this._response.status; }\n    /**\n     * @returns statusText attribute\n     * @see {@link https://xhr.spec.whatwg.org/#the-statustext-attribute}\n     */\n    get statusText() { return this._response.statusMessage; }\n    /**\n     * Get a response header value.\n     *\n     * @param name Header name\n     * @returns Header value\n     * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-getresponseheader}\n     */\n    getResponseHeader(name) {\n        return this._response.headers.getHeader(name);\n    }\n    /**\n     * Get all response headers as a string.\n     *\n     * @returns Concatenated headers\n     * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-getallresponseheaders}\n     */\n    getAllResponseHeaders() {\n        return this._response.headers.getAll();\n    }\n    /**\n     * Throws when required, but has no other effect.\n     *\n     * @param mime MIME type\n     * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-overridemimetype}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    overrideMimeType(mime) {\n        if (this._readyState === MockXhr.LOADING || this._readyState === MockXhr.DONE) {\n            throwError('InvalidStateError');\n        }\n        // The other steps are not implemented\n    }\n    /**\n     * @returns responseType attribute\n     * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-responsetype}\n     */\n    get responseType() { return this._responseType; }\n    /**\n     * @param value responseType value\n     * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-responsetype}\n     */\n    set responseType(value) {\n        // Since this library is meant to run on node, skip the steps involving the Window object.\n        if (this._readyState === MockXhr.LOADING || this._readyState === MockXhr.DONE) {\n            throwError('InvalidStateError');\n        }\n        // The spec doesn't mandate throwing anything on invalid values since values must be of type\n        // XMLHttpRequestResponseType. Observed browser behavior is to ignore invalid values.\n        if (RESPONSE_TYPES.includes(value)) {\n            this._responseType = value;\n        }\n    }\n    /**\n     * @returns response attribute\n     * @see {@link https://xhr.spec.whatwg.org/#the-response-attribute}\n     */\n    get response() {\n        if (this._responseType === '' || this._responseType === 'text') {\n            if (this._readyState !== MockXhr.LOADING && this._readyState !== MockXhr.DONE) {\n                return '';\n            }\n            return this._getTextResponse();\n        }\n        if (this._readyState !== MockXhr.DONE) {\n            return null;\n        }\n        // No specific handling of 'arraybuffer', 'blob', or 'document' response types\n        if (this._responseType === 'json') {\n            if (this._response.body === null) {\n                return null;\n            }\n            try {\n                return JSON.parse(this._response.body);\n            }\n            catch (e) {\n                return null;\n            }\n        }\n        // Other responseTypes are sent as-is. They can be given directly by setResponseBody() anyway.\n        return this._response.body;\n    }\n    /**\n     * @returns responseText attribute\n     * @see {@link https://xhr.spec.whatwg.org/#the-responsetext-attribute}\n     */\n    get responseText() {\n        if (this._responseType !== '' && this._responseType !== 'text') {\n            throwError('InvalidStateError');\n        }\n        if (this._readyState !== MockXhr.LOADING && this._readyState !== MockXhr.DONE) {\n            return '';\n        }\n        return this._getTextResponse();\n    }\n    /**\n     * @returns responseXML attribute\n     * @see {@link https://xhr.spec.whatwg.org/#dom-xmlhttprequest-responsexml}\n     */\n    get responseXML() {\n        if (this._responseType !== '' && this._responseType !== 'document') {\n            throwError('InvalidStateError');\n        }\n        if (this._readyState !== MockXhr.DONE) {\n            return null;\n        }\n        // The response body is not converted to a document response. To get a document\n        // response, pass it directly as the response body in setResponseBody().\n        return this._response.body ?? '';\n    }\n    //------------------------------\n    // Request and response handling\n    //------------------------------\n    /**\n     * Steps for when the request upload is complete.\n     *\n     * @param requestBodyTransmitted Bytes transmitted\n     * @param requestBodyLength Request body's length\n     * @see {@link https://xhr.spec.whatwg.org/#the-send()-method \"processRequestEndOfBody\" steps}\n     */\n    _processRequestEndOfBody(requestBodyTransmitted, requestBodyLength) {\n        this._uploadCompleteFlag = true;\n        // There must be at least one Upload listener registered before send() to emit upload progress\n        // events.\n        if (!this._uploadListenerFlag) {\n            return;\n        }\n        this._fireUploadProgressEvent('progress', requestBodyTransmitted, requestBodyLength);\n        this._fireUploadProgressEvent('load', requestBodyTransmitted, requestBodyLength);\n        this._fireUploadProgressEvent('loadend', requestBodyTransmitted, requestBodyLength);\n    }\n    /**\n     * Steps for when the response headers are received.\n     *\n     * @param response Response\n     * @see {@link https://xhr.spec.whatwg.org/#the-send()-method \"processResponse\" steps}\n     */\n    _processResponse(response) {\n        this._response = response;\n        this._handleErrors();\n        if (this._response.isNetworkError) {\n            return;\n        }\n        this._readyState = MockXhr.HEADERS_RECEIVED;\n        this._fireReadyStateChangeEvent();\n        if (this._readyState !== MockXhr.HEADERS_RECEIVED) {\n            return;\n        }\n        if (this._response.body === null) {\n            this._handleResponseEndOfBody();\n        }\n        // Don't do the step that extract a length from the response's header list. The\n        // downloadProgress() method of the mock's MockXhrResponseReceiver API has a length argument\n        // that is used instead.\n        // Further steps are triggered by the mock's MockXhrResponseReceiver API\n    }\n    /**\n     * Handle response end-of-body for response.\n     *\n     * @see {@link https://xhr.spec.whatwg.org/#handle-response-end-of-body}\n     */\n    _handleResponseEndOfBody() {\n        this._handleErrors();\n        if (this._response.isNetworkError) {\n            return;\n        }\n        const transmitted = getBodyByteSize(this._response.body);\n        this._fireProgressEvent('progress', transmitted, this._response.length);\n        this._readyState = MockXhr.DONE;\n        this._sendFlag = false;\n        this._terminateFetchController();\n        this._fireReadyStateChangeEvent();\n        this._fireProgressEvent('load', transmitted, this._response.length);\n        this._fireProgressEvent('loadend', transmitted, this._response.length);\n    }\n    /**\n     * The \"handle errors\" steps.\n     *\n     * @see {@link https://xhr.spec.whatwg.org/#handle-errors}\n     */\n    _handleErrors() {\n        if (!this._sendFlag) {\n            return;\n        }\n        if (this._timedOutFlag) {\n            // Timeout\n            this._requestErrorSteps('timeout');\n            // We don't check the aborted flag because it can't be set in the context of this library.\n            // In a browser, the aborted flag can be set if the user presses Esc, the browser stop button,\n            // or the document the fetch is associated with is unloaded.\n        }\n        else if (this._response.isNetworkError) {\n            // Network error\n            this._requestErrorSteps('error');\n        }\n    }\n    /**\n     * The \"request error steps\" for event 'event'.\n     *\n     * @param event Event name\n     * @see {@link https://xhr.spec.whatwg.org/#request-error-steps}\n     */\n    _requestErrorSteps(event) {\n        this._readyState = MockXhr.DONE;\n        this._sendFlag = false;\n        this._response = makeNetworkErrorResponse();\n        this._fireReadyStateChangeEvent();\n        if (!this._uploadCompleteFlag) {\n            this._uploadCompleteFlag = true;\n            if (this._uploadListenerFlag) {\n                // If no listeners were registered before send(), no upload events should be fired.\n                this._fireUploadProgressEvent(event, 0, 0);\n                this._fireUploadProgressEvent('loadend', 0, 0);\n            }\n        }\n        this._fireProgressEvent(event, 0, 0);\n        this._fireProgressEvent('loadend', 0, 0);\n    }\n    _getTextResponse() {\n        // Skip support for charset decoding as outlined in https://xhr.spec.whatwg.org/#text-response\n        // Users of this library should instead directly set a string response body as needed.\n        // The spec allows access to a text response while it's being received (i.e. LOADING state).\n        // This library current offers no way to simulate this.\n        return this._response.body?.toString() ?? '';\n    }\n    //----------\n    // Internals\n    //----------\n    _callOnSend(onSend) {\n        // Saves the callback and request data in case they change before then() executes\n        if (onSend) {\n            const request = this._currentRequest;\n            Promise.resolve(true).then(() => onSend.call(request, request));\n        }\n    }\n    _terminateFetchController() {\n        delete this._currentRequest;\n    }\n    _fireProgressEvent(name, transmitted, length) {\n        this.dispatchEvent(new XhrProgressEvent(name, transmitted, length));\n    }\n    _fireUploadProgressEvent(name, transmitted, length) {\n        this._uploadObject.dispatchEvent(new XhrProgressEvent(name, transmitted, length));\n    }\n    _fireReadyStateChangeEvent() {\n        const event = new XhrEvent('readystatechange');\n        this.dispatchEvent(event);\n    }\n    _scheduleRequestTimeout() {\n        // Cancel any previous timeout task\n        if (this._timeoutTask) {\n            clearTimeout(this._timeoutTask);\n        }\n        if (this._timeout > 0) {\n            // The timeout delay must be measured relative to the start of fetching\n            // https://xhr.spec.whatwg.org/#the-timeout-attribute\n            const delay = Math.max(0, this._timeout - (Date.now() - this._timeoutReference));\n            this._timeoutTask = setTimeout(() => {\n                if (this._sendFlag) {\n                    this._currentRequest.setRequestTimeout();\n                }\n                delete this._timeoutTask;\n            }, delay);\n        }\n    }\n    _getPrototype() {\n        return this.constructor;\n    }\n}\n//-------\n// States\n//-------\nMockXhr.UNSENT = 0;\nMockXhr.OPENED = 1;\nMockXhr.HEADERS_RECEIVED = 2;\nMockXhr.LOADING = 3;\nMockXhr.DONE = 4;\n/**\n * Global flag to enable the effects of the timeout attribute\n */\nMockXhr.timeoutEnabled = true;\nfunction throwError(type, text = '') {\n    const exception = new Error(text);\n    exception.name = type;\n    throw exception;\n}\nfunction makeNetworkErrorResponse() {\n    return {\n        isNetworkError: true,\n        status: 0,\n        statusMessage: '',\n        headers: new HeadersContainer(),\n        length: 0,\n        body: null,\n    };\n}\n\nexport { MockXhr as default };\n//# sourceMappingURL=MockXhr.mjs.map\n","/**\n * mock-xmlhttprequest v8.1.0\n * (c) 2022 Bertrand Guay-Paquet\n * @license ISC\n */\nimport { normalizeHTTPMethodName, getBodyByteSize } from './Utils.mjs';\n\n/**\n * Mock server for responding to XMLHttpRequest mocks from the class MockXhr. Provides simple route\n * matching and request handlers to make test harness creation easier.\n */\nclass MockXhrServer {\n    /**\n     * Constructor\n     *\n     * @param xhrMock XMLHttpRequest mock class\n     * @param routes Routes\n     */\n    constructor(xhrMock, routes) {\n        this.progressRate = 0;\n        this._MockXhr = xhrMock;\n        this._requests = [];\n        this._routes = {};\n        if (routes) {\n            Object.entries(routes).forEach(([method, [urlMatcher, handler]]) => {\n                this.addHandler(method, urlMatcher, handler);\n            });\n        }\n        xhrMock.onSend = (request) => { this._handleRequest(request); };\n        // Setup a mock request factory for users\n        this._xhrFactory = () => new this._MockXhr();\n    }\n    get MockXhr() {\n        return this._MockXhr;\n    }\n    /**\n     * For backwards compatibility with versions < 4.1.0\n     *\n     * @deprecated Use the MockXhr property instead\n     */\n    get xhrMock() {\n        return this._MockXhr;\n    }\n    get xhrFactory() {\n        return this._xhrFactory;\n    }\n    /**\n     * Install the server's XMLHttpRequest mock in the global context. You can specify a different\n     * context with the optional `context` argument. Revert with remove().\n     *\n     * @param context Context object (e.g. global, window)\n     * @returns this\n     */\n    install(context = globalThis) {\n        this._savedContext = context;\n        // Distinguish between an undefined and a missing XMLHttpRequest property\n        if ('XMLHttpRequest' in context) {\n            this._savedContextHadXMLHttpRequest = true;\n            this._savedXMLHttpRequest = context.XMLHttpRequest;\n        }\n        else {\n            this._savedContextHadXMLHttpRequest = false;\n        }\n        context.XMLHttpRequest = this._MockXhr;\n        return this;\n    }\n    /**\n     * Revert the changes made by install(). Call this after your tests.\n     */\n    remove() {\n        if (!this._savedContext) {\n            throw new Error('remove() called without a matching install(context).');\n        }\n        if (this._savedContextHadXMLHttpRequest) {\n            this._savedContext.XMLHttpRequest = this._savedXMLHttpRequest;\n            delete this._savedXMLHttpRequest;\n        }\n        else {\n            delete this._savedContext.XMLHttpRequest;\n        }\n        delete this._savedContext;\n    }\n    /**\n     * Disable the effects of the timeout attribute on the XMLHttpRequest mock used by the server.\n     */\n    disableTimeout() {\n        this._MockXhr.timeoutEnabled = false;\n    }\n    /**\n     * Enable the effects of the timeout attribute on the XMLHttpRequest mock used by the server.\n     */\n    enableTimeout() {\n        this._MockXhr.timeoutEnabled = true;\n    }\n    /**\n     * Add a GET request handler.\n     *\n     * @param urlMatcher Url matcher\n     * @param handler Request handler\n     * @returns this\n     */\n    get(urlMatcher, handler) {\n        return this.addHandler('GET', urlMatcher, handler);\n    }\n    /**\n     * Add a POST request handler.\n     *\n     * @param urlMatcher Url matcher\n     * @param handler Request handler\n     * @returns this\n     */\n    post(urlMatcher, handler) {\n        return this.addHandler('POST', urlMatcher, handler);\n    }\n    /**\n     * Add a PUT request handler.\n     *\n     * @param urlMatcher Url matcher\n     * @param handler Request handler\n     * @returns this\n     */\n    put(urlMatcher, handler) {\n        return this.addHandler('PUT', urlMatcher, handler);\n    }\n    /**\n     * Add a DELETE request handler.\n     *\n     * @param urlMatcher Url matcher\n     * @param handler Request handler\n     * @returns this\n     */\n    delete(urlMatcher, handler) {\n        return this.addHandler('DELETE', urlMatcher, handler);\n    }\n    /**\n     * Add a request handler.\n     *\n     * @param method HTTP method\n     * @param urlMatcher Url matcher\n     * @param handler Request handler\n     * @returns this\n     */\n    addHandler(method, urlMatcher, handler) {\n        // Match the processing done in MockXHR for the method name\n        method = normalizeHTTPMethodName(method);\n        const routes = this._routes[method] ?? (this._routes[method] = []);\n        routes.push({ urlMatcher, handler, count: 0 });\n        return this;\n    }\n    /**\n     * Set the default request handler for requests that don't match any route.\n     *\n     * @param handler Request handler\n     * @returns this\n     */\n    setDefaultHandler(handler) {\n        this._defaultRoute = { handler, count: 0 };\n        return this;\n    }\n    /**\n     * Return 404 responses for requests that don't match any route.\n     *\n     * @returns this\n     */\n    setDefault404() {\n        return this.setDefaultHandler({ status: 404 });\n    }\n    /**\n     * @returns Array of requests received by the server. Entries: { method, url, headers, body? }\n     */\n    getRequestLog() {\n        return [...this._requests];\n    }\n    _handleRequest(request) {\n        // Record the request for easier debugging\n        this._requests.push({\n            method: request.method,\n            url: request.url,\n            headers: request.requestHeaders.getHash(),\n            body: request.body,\n        });\n        const route = this._findFirstMatchingRoute(request) ?? this._defaultRoute;\n        if (route) {\n            // Routes can have arrays of handlers. Each one is used once and the last one is used if out\n            // of elements.\n            const handler = Array.isArray(route.handler)\n                ? route.handler[Math.min(route.handler.length - 1, route.count)]\n                : route.handler;\n            route.count += 1;\n            if (typeof handler === 'function') {\n                handler(request);\n            }\n            else if (handler === 'error') {\n                request.setNetworkError();\n            }\n            else if (handler === 'timeout') {\n                request.setRequestTimeout();\n            }\n            else {\n                const responseHeaders = { ...handler.headers };\n                const responseBodySize = getBodyByteSize(handler.body);\n                // Add the Content-Length header if it's not present.\n                if (!Object.keys(responseHeaders).some((k) => k.toUpperCase() === 'CONTENT-LENGTH')) {\n                    responseHeaders['content-length'] = String(responseBodySize);\n                }\n                if (this.progressRate <= 0) {\n                    request.respond(handler.status, responseHeaders, handler.body, handler.statusText);\n                }\n                else {\n                    let responseTransmitted = 0;\n                    const responsePhase = () => {\n                        if (responseTransmitted === 0) {\n                            request.setResponseHeaders(handler.status, responseHeaders, handler.statusText);\n                        }\n                        if (this.progressRate <= 0) {\n                            // Final operation for this request\n                            request.setResponseBody(handler.body);\n                        }\n                        else {\n                            const nextTransmitted = responseTransmitted + this.progressRate;\n                            if (nextTransmitted < responseBodySize) {\n                                responseTransmitted = nextTransmitted;\n                                request.downloadProgress(responseTransmitted);\n                                Promise.resolve().then(() => responsePhase());\n                            }\n                            else {\n                                // Final operation for this request\n                                request.setResponseBody(handler.body);\n                            }\n                        }\n                    };\n                    const requestBodySize = request.getRequestBodySize();\n                    if (requestBodySize === 0) {\n                        responsePhase();\n                    }\n                    else {\n                        let requestTransmitted = 0;\n                        const requestPhase = () => {\n                            if (this.progressRate <= 0) {\n                                // Final operation for this request\n                                request.respond(handler.status, responseHeaders, handler.body, handler.statusText);\n                            }\n                            else {\n                                const nextTransmitted = requestTransmitted + this.progressRate;\n                                if (nextTransmitted < requestBodySize) {\n                                    requestTransmitted = nextTransmitted;\n                                    request.uploadProgress(requestTransmitted);\n                                    Promise.resolve().then(() => requestPhase());\n                                }\n                                else {\n                                    responsePhase();\n                                }\n                            }\n                        };\n                        requestPhase();\n                    }\n                }\n            }\n        }\n    }\n    _findFirstMatchingRoute(request) {\n        const method = normalizeHTTPMethodName(request.method);\n        if (!this._routes[method]) {\n            return undefined;\n        }\n        const { url } = request;\n        return this._routes[method].find((route) => {\n            const { urlMatcher } = route;\n            if (typeof urlMatcher === 'function') {\n                return urlMatcher(url);\n            }\n            else if (urlMatcher instanceof RegExp) {\n                return urlMatcher.test(url);\n            }\n            return urlMatcher === url;\n        });\n    }\n}\n\nexport { MockXhrServer as default };\n//# sourceMappingURL=MockXhrServer.mjs.map\n","/**\n * mock-xmlhttprequest v8.1.0\n * (c) 2022 Bertrand Guay-Paquet\n * @license ISC\n */\nimport MockXhr from './MockXhr.mjs';\nimport MockXhrServer from './MockXhrServer.mjs';\n\n/**\n * Create a new \"local\" MockXhr subclass. Using a subclass of `MockXhr` in each test case makes it\n * easier to ensure they are self-contained. For example if you set the onSend static propertiy on\n * a subclass, this will only affect that subclass and not the others created in your other test\n * cases. You therefore don't need to add cleanup code to revert the changes made to the subclass.\n *\n * @returns New MockXhr subclass\n */\nfunction newMockXhr() {\n    var _a;\n    return _a = class LocalMockXhr extends MockXhr {\n            constructor() {\n                super();\n                // Call the local MockXhr subclass' onCreate hook on the new mock instance\n                LocalMockXhr.onCreate?.(this);\n            }\n        },\n        // Reset to default value to override the parent class' flag\n        _a.timeoutEnabled = true,\n        _a;\n}\n/**\n * @param routes Routes\n * @returns new MockXhrServerserver with its own MockXhr subclass.\n */\nfunction newServer(routes) {\n    return new MockXhrServer(newMockXhr(), routes);\n}\n\nexport { newMockXhr, newServer };\n//# sourceMappingURL=Factories.mjs.map\n"],"names":["E","__name","name","callback","ctx","e","self","listener","data","evtArr","i","len","evts","liveEvents","tinyEmitterModule","TinyEmitter","tinyEmitter","EventBus","_sfc_main$1","defineComponent","token","humanizedSize","url","xhr","response","detail","fd","_hoisted_2","_hoisted_4","_hoisted_7","_hoisted_10","_hoisted_12","_createElementVNode","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_5","_createTextVNode","_toDisplayString","_hoisted_6","_normalizeStyle","_hoisted_8","_hoisted_11","EVENT_NAMESPACE","ADD_EVENT","DELETE_EVENT","_sfc_main","UploadEntry","ViewEntry","indexGenerated","f","newTokens","oldTokens","eventType","fileEvent","event","files","file","_Fragment","_normalizeClass","$event","args","_renderList","index","_createBlock","_component_UploadEntry","_component_ViewEntry","HeadersContainer","headersOrSrc","key","value","result","headerValue","headers","currentValue","MockXhrRequest","_requestData","_responseReceiver","transmitted","status","body","statusText","getBodyByteSize","getStringByteLength","sum","valueSize","string","isTokenRegEx","isToken","isHeaderName","headerName","isHeaderValue","forbiddenHeaders","forbiddenHeaderRegEx","isRequestHeaderForbidden","isRequestMethod","method","isRequestMethodForbiddenRegEx","isRequestMethodForbidden","upperCaseMethods","upperCaseMethodsRegEx","normalizeHTTPMethodName","statusTexts","getStatusText","decodeAndSplitHeaderValue","values","codePoints","sliceAndTrimString","start","end","currentValueStart","inQuotedString","inQuotedStringEscape","codePoint","isDigitsRegEx","extractLengthFromHeader","other","RequestData","_requestHeaders","_method","_url","_body","_credentialsMode","XhrEvent","type","XhrProgressEvent","loaded","total","XhrEventTarget","eventContext","listeners","options","listenerEntry","makeListenerEntry","isEventHandlerProperty","useCapture","entry","optionsIsBoolean","RESPONSE_TYPES","MockXhr","makeNetworkErrorResponse","_a","request","requestBodyTransmitted","requestBodyLength","statusMessage","responseHeaders","contentLength","receivedBytesLength","async","throwError","extractedContentType","contentType","requestData","req","prototype","mime","onSend","length","delay","text","exception","MockXhrServer","xhrMock","routes","urlMatcher","handler","context","route","responseBodySize","k","responseTransmitted","responsePhase","nextTransmitted","requestBodySize","requestTransmitted","requestPhase","newMockXhr","LocalMockXhr","newServer"],"mappings":"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","x_google_ignoreList":[0,4,5,6,7,8,9,10,11,12,13]}